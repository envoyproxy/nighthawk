syntax = "proto3";

package nighthawk.adaptive_rps;

import "api/adaptive_rps/metric_spec.proto";
import "api/client/output.proto";

// Binary status from checking the value against a threshold.
enum ThresholdStatus {
  UNKNOWN_THRESHOLD_STATUS = 0;
  WITHIN_THRESHOLD = 1;
  OUTSIDE_THRESHOLD = 2;
}

// Records the status of a feedback metric during this benchmark session.
message MetricEvaluation {
  // Plugin name, metric name, thresholds.
  MetricSpec metric_spec = 1;

  // The numerical value of the metric measured during this benchmark session.
  double metric_value = 2;

  // A measure of threshold compliance based on this metric value.
  oneof threshold_evaluation {
    // Binary status from checking the value against a threshold.
    ThresholdStatus threshold_status = 3;
    // Evaluation score returned by a CustomMetricEvaluator plugin, between
    // -1.0 and 1.0. This expresses how close the metric was to the threshold
    // by an arbitrary formula selected and configured in the MetricSpec,
    // such as a sigmoid curve. The controller can choose to make larger RPS
    // adjustments when farther away to converge faster.
    double threshold_score = 4;
  }
}

// Summary of a single Nighthawk Service benchmark session with evaluation
// results.
message BenchmarkResult {
  // Raw Nighthawk Service output. Includes start/end times and full Nighthawk
  // Service input spec. May contain an error status.
  nighthawk.client.Output nighthawk_service_output = 1;

  // Status of all defined adaptive RPS feedback metrics during this benchmark
  // session. Not present in the event of errors.
  repeated MetricEvaluation metric_evaluations = 3;
}
