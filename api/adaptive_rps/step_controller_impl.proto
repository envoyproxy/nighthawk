// Plugin-specific config protos for StepControllers.

syntax = "proto3";

package nighthawk.adaptive_rps;

import "validate/validate.proto";

// Configuration for a step controller that performs a linear search for the
// optimal RPS, starting from the minimum RPS and incrementing by a fixed amount
// until reaching the point where performance declines.
message LinearSearchStepControllerConfig {
  // Minimum RPS that should be attempted, regardless of performance. Also used
  // as the initial RPS.
  uint32 minimum_rps = 1 [(validate.rules).uint32 = {gt: 0}];
  // Maximum RPS that should be attempted, regardless of performance.
  uint32 maximum_rps = 2 [(validate.rules).uint32 = {gt: 0}];
  // Constant step to be used for all RPS adjustments.
  uint32 rps_step = 3 [(validate.rules).uint32 = {gt: 0}];
}

// Configuration for a step controller that performs a binary search for the
// optimal RPS.
message BinarySearchStepControllerConfig {
  // Minimum of the RPS binary search range.
  uint32 minimum_rps = 1 [(validate.rules).uint32 = {gt: 0}];
  // Maximum of the RPS binary search range.
  uint32 maximum_rps = 2 [(validate.rules).uint32 = {gt: 0}];
}
