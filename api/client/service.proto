syntax = "proto3";

package nighthawk.client;

import "google/rpc/status.proto";
import "validate/validate.proto";
import "envoy/api/v2/core/base.proto";

import "api/client/options.proto";
import "api/client/output.proto";

message StartRequest {
  CommandLineOptions options = 1;
}

// TODO(oschaaf): Not implemented yet.
message UpdateRequest {
}

// TODO(oschaaf): Not implemented yet.
message CancellationRequest {
}

message ExecutionRequest {
  oneof command_specific_options {
    option (validate.required) = true;
    StartRequest start_request = 1;
    UpdateRequest update_request = 2;
    CancellationRequest cancellation_request = 3;
  }
}

message ExecutionResponse {
  oneof status_specifier {
    option (validate.required) = true;
    Output output = 1;
    google.rpc.Status error_detail = 7;
  }
}

message HeaderStreamRequest {
  uint64 amount = 1;
}

message Condition {
  enum ConditionType {
    EQUALS = 0;
    LESS_THEN = 1;
    LESS_OR_EQUAL = 2;
    GREATER_THEN = 3;
    GREATER_OR_EQUAL = 4;
  }

  string name = 1;
  ConditionType type = 2;
}

message Expectation {
  enum DataType {
    TEXT = 0;
    INT = 1;
  }
  string name = 1;
  string input_header = 2;
  DataType input_header_data_type = 3;
  Condition condition = 4;
}

message HeaderStreamResponse {
  // method/path/uri/authority/content_length can all be expressed in request headers.
  // so technically they are redundant. In case of ambiguity, the explicit fields prevail.
  // Note that as of today, the target upstream/cluster that will be used to replay traffic to
  // fixes the destination address/port
  string method = 1;
  string uri = 2;
  string authority = 3;
  envoy.api.v2.core.HeaderMap headers = 4;
  uint32 content_length = 5;

  repeated Expectation expectations = 6;

  // TODO(oschaaf): nice to have
  string sni_hostname = 10;
}

service NighthawkService {
  //  Accepts a stream of ExecutionRequests, which can be used to initiate, update, or cancel a
  //  test. Returns a stream of ExecutionResponse objects which will contain results for all
  //  Nighthawk runs.
  rpc ExecutionStream(stream ExecutionRequest) returns (stream ExecutionResponse) {
  }
  rpc HeaderStream(stream HeaderStreamRequest) returns (stream HeaderStreamResponse) {
  }
}
