syntax = "proto3";

package nighthawk.client;

import "google/protobuf/wrappers.proto";
import "google/rpc/status.proto";
import "validate/validate.proto";
import "envoy/api/v2/core/base.proto";

import "api/client/options.proto";
import "api/client/output.proto";

message StartRequest {
  CommandLineOptions options = 1;
}

// TODO(oschaaf): Not implemented yet.
message UpdateRequest {
}

// TODO(oschaaf): Not implemented yet.
message CancellationRequest {
}

message ExecutionRequest {
  oneof command_specific_options {
    option (validate.required) = true;
    StartRequest start_request = 1;
    UpdateRequest update_request = 2;
    CancellationRequest cancellation_request = 3;
  }
}

message ExecutionResponse {
  oneof status_specifier {
    option (validate.required) = true;
    Output output = 1;
    google.rpc.Status error_detail = 7;
  }
}

// Used to request a RequestStreamResponse.
message RequestStreamRequest {
  // Amount of RequestStreamResponses that should be yielded.
  // Used to implement basic flow control by the client. Once AsyncClientImpl gets
  // a way to apply backpressure this could probably be dropped.
  uint64 amount = 1;
}

message RequestStreamResponse {
  // Specifies what the requests look like. Will be merged with the client's configuration.
  RequestSpecifier request_specifier = 1;
  // Response-level expectations associated to the above request specification.
  Expectations expectations = 2;
}

message RequestSpecifier {
  // method/path/uri/authority/content_length can all be expressed in request headers.
  // so technically they are redundant. In case of ambiguity headers may end up being duplicated.
  // Note that as of today, the target upstream/cluster that will be used to replay traffic to
  // fixes the destination address/port
  // Request method
  google.protobuf.StringValue method = 1;
  // Request URI
  google.protobuf.StringValue uri = 2;
  // Request authority
  google.protobuf.StringValue authority = 3;
  // Request headers
  envoy.api.v2.core.HeaderMap headers = 4;
  // Request content length. The client will transfer the number of bytes specified here in
  // for the request body.
  google.protobuf.UInt32Value content_length = 5;
  // TODO(oschaaf): nice to have
  // google.protobuf.StringValue sni_hostname = 10;
}

// Response-level expectations. If set, any unmet expectations will result in stats counter
// increases in the future.
message Expectations {
  // Expected response status code
  google.protobuf.UInt32Value response_code = 1;
  // Expected response body content length
  google.protobuf.UInt32Value content_length = 2;
}

service NighthawkService {
  //  Accepts a stream of ExecutionRequests, which can be used to initiate, update, or cancel a
  //  test. Returns a stream of ExecutionResponse objects which will contain results for all
  //  Nighthawk runs.
  rpc ExecutionStream(stream ExecutionRequest) returns (stream ExecutionResponse) {
  }

  // For obtaining a stream of request specifications and expecatations for replay purposes.
  rpc RequestStream(stream RequestStreamRequest) returns (stream RequestStreamResponse) {
  }
}
