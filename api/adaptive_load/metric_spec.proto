syntax = "proto3";

package nighthawk.adaptive_load;

import "api/adaptive_load/scoring_function.proto";
import "google/protobuf/wrappers.proto";
import "validate/validate.proto";

// Identifies a feedback metric.
message MetricSpec {
  // Name of the metric to evaluate. For the set of built-in metric names, see
  // source/adaptive_load/metrics_plugin_impl.cc.
  string metric_name = 1 [(validate.rules).string.min_len = 1];
  // Name of the MetricsPlugin providing the metric ("builtin" for built-in).
  string metrics_plugin_name = 2 [(validate.rules).string.min_len = 1];
}

// Specifies a simple upper or lower threshold, or configures a scoring
// function.
message ThresholdSpec {
  // A threshold for evaluating a metric value.
  oneof threshold_spec {
    // Simple upper threshold:
    //   metric <= upper_threshold -> WITHIN_THRESHOLD
    //   metric > upper_threshold -> OUTSIDE_THRESHOLD
    google.protobuf.DoubleValue upper_threshold = 1;
    // Simple lower threshold:
    //   metric >= lower_threshold -> WITHIN_THRESHOLD
    //   metric < lower_threshold -> OUTSIDE_THRESHOLD
    google.protobuf.DoubleValue lower_threshold = 2;
    // Selection and configuration of a ScoringFunction that measures proximity
    // to a threshold. 0.0 means the value equals the threshold, positive means
    // the value is below the threshold so the input should ramp up, and
    // negative means the value is above the threshold so input should ramp
    // down.
    ScoringFunctionConfig scoring_function = 3;
  }
  // Relative importance of this threshold when adjusting based on multiple
  // metrics.
  google.protobuf.DoubleValue weight = 4
      [(validate.rules).double.gt = 0.0, (validate.rules).message.required = true];
}

// Identifies a feedback metric and specifies a threshold for it.
message MetricSpecWithThreshold {
  // Identifies a metric to collect and evaluate.
  MetricSpec metric_spec = 1;
  // Specifies a threshold for this metric.
  ThresholdSpec threshold_spec = 2;
}
