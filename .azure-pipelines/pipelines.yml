trigger:
  branches:
    include:
    - "main"

stages:
- stage: check
  dependsOn: []
  pool: "envoy-x64-large"
  jobs:
  - job: build_and_format
    displayName: "do_ci.sh"
    dependsOn: []
    strategy:
      maxParallel: 2
      matrix:
        build:
          CI_TARGET: "build"
        format:
          CI_TARGET: "check_format"
    timeoutInMinutes: 120
    steps:
    - template: bazel.yml
      parameters:
        ciTarget: $(CI_TARGET)

- stage: test
  dependsOn: ["check"]
  pool: "envoy-x64-large"
  jobs:
  - job: test_and_benchmark
    displayName: "do_ci.sh"
    strategy:
      # Both test and benchmark need dedicated resources for stability.
      maxParallel: 1
      matrix:
#        test:
#          CI_TARGET: "test"
        benchmark:
          CI_TARGET: "benchmark_with_own_binaries"
    timeoutInMinutes: 120
    steps:
    - template: bazel.yml
      parameters:
        ciTarget: $(CI_TARGET)
    - bash: |
        echo "File ls:"
        ls -l
        echo "File ls bazel out"
        ls -l bazel-out
        echo "File ls testlogs:"
        ls -l bazel-testlogs
        BAZEL_OUT=$(readlink bazel-testlogs)
        echo "readlink"
        ls -l $BAZEL_OUT
        echo "##vso[task.setvariable variable=TARGET_LOG_PATH]$BAZEL_OUT" 
      condition: always()
      displayName: "ls"
    - task: PublishPipelineArtifact@1
      condition: always()
      displayName: 'Publish Benchmark Test Log'
      inputs:
        targetPath: $(TARGET_LOG_PATH)/benchmarks/test_dynamic_benchmarks/test.log
        artifactName: BenchmarkTestLog-$(System.JobAttempt)

- stage: test_gcc
  dependsOn: ["check"]
  pool: "envoy-x64-large"
  jobs:
  - job: test_gcc
    displayName: "do_ci.sh"
    strategy:
      maxParallel: 1
      matrix:
        test_gcc:
          CI_TARGET: "test_gcc"
    timeoutInMinutes: 120
    steps:
    - template: bazel.yml
      parameters:
        ciTarget: $(CI_TARGET)

- stage: sanitizers
  dependsOn: ["test"]
  pool: "envoy-x64-large"
  jobs:
  - job: sanitizers
    displayName: "do_ci.sh"
    strategy:
      maxParallel: 2
      matrix:
        asan:
          CI_TARGET: "asan"
        tsan:
          CI_TARGET: "tsan"
    timeoutInMinutes: 120
    steps:
    - template: bazel.yml
      parameters:
        ciTarget: $(CI_TARGET)

- stage: coverage_unit
  dependsOn: ["test"]
  pool: "envoy-x64-large"
  jobs:
  - job: coverage_unit
    displayName: "do_ci.sh"
    strategy:
      maxParallel: 1
      matrix:
        coverage:
          CI_TARGET: "coverage"
    timeoutInMinutes: 120
    steps:
    - template: bazel.yml
      parameters:
        ciTarget: $(CI_TARGET)
    - task: PublishPipelineArtifact@1
      condition: always()
      displayName: 'Publish the line coverage report'
      inputs:
        targetPath: $(Build.SourcesDirectory)/coverage_html.zip
        artifactName: UnitTestCoverageReport-$(System.JobAttempt)

# coverage_integration stage was temporarily removed due to the issue
# reported by https://github.com/envoyproxy/nighthawk/issues/1006
- stage: release
  dependsOn:
  - "test_gcc"
  - "sanitizers"
  - "coverage_unit"
  condition: eq(variables['PostSubmit'], true)
  pool: "envoy-x64-large"
  jobs:
  - job: release
    displayName: "do_ci.sh"
    strategy:
      matrix:
        release:
          CI_TARGET: "docker"
    timeoutInMinutes: 120
    steps:
    - template: bazel.yml
      parameters:
        ciTarget: $(CI_TARGET)
