# proto-file: adaptive_load/adaptive_load.proto
# proto-message: AdaptiveLoadSessionSpec

metrics_plugin_configs {
  name: "example-metrics-plugin"
  typed_config {
    [type.googleapis.com/nighthawk.adaptive_load.ExampleMetricsPluginConfig] {
      address: "x.y.z"
      credentials: "key-id-123"
    }
  }
}

# For the full list of built-in metric names, see
# source/adaptive_load/metrics_plugin_impl.cc.

metric_thresholds {
  metric_spec {
    metric_name: "latency-ns-max"
    # metric_name: "latency-ns-mean-plus-2stdev"
    metrics_plugin_name: "builtin"
  }
  threshold_spec {
    upper_threshold {
      value: 10000000.0  # 10 ms
    }
    # scoring_function {
    #   name: "sigmoid"
    #  typed_config {
    #    [type.googleapis.com/nighthawk.adaptive_load.SigmoidScoringFunctionConfig] {
    #      threshold: 5000000.0  # 5 ms
    #      k: 0.00000001  # Should be around 1/threshold
    #    }
    #  }
    #}
    weight {
      value: 1.0
    }
  }
}

#metric_thresholds {
#  metric_spec {
#    metric_name: "success-rate"
#    metrics_plugin_name: "builtin"
#  }
#  threshold_spec {
#    lower_threshold {
#      value : 0.95
#    }
#    weight {
#      value: 0.10
#    }
#  }
#}

# Informational metrics are recorded in the output but are not taken into account
# when adjusting the load.

#informational_metric_specs {
#  metric_name: "attempted-rps"
#  metrics_plugin_name: "builtin"
#}

#informational_metric_specs {
#  metric_name: "achieved-rps"
#  metrics_plugin_name: "builtin"
#}

#informational_metric_specs {
#  metric_name: "send-rate"
#  metrics_plugin_name: "builtin"
#}

# Metric defined in example metrics plugin:
#informational_metric_specs {
#  metric_name: "example_metric1"
#  metrics_plugin_name: "example-metrics-plugin"
#}

# CommandLineOptions proto describing the traffic to generate, but without
# duration, open_loop, or the field to be varied (e.g. requests_per_second),
# which will be managed by the adaptive load controller.
nighthawk_traffic_template {
  uri {
    value: "[::1]:12345"
  }
}

measuring_period {
  seconds: 10
}

convergence_deadline {
  seconds: 180
}

testing_stage_duration {
  seconds: 30
}

step_controller_config {
  name: "exponential-search"
  typed_config {
    [type.googleapis.com/nighthawk.adaptive_load.ExponentialSearchStepControllerConfig] {
      input_variable_setter {
        name: "rps"
      }
      initial_value: 10
      exponential_factor: 2.0
    }
  }
}
